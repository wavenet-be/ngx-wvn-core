var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/guards/AuthenticationGuard.html",[0,1.21,1,0.944]],["body/guards/AuthenticationGuard.html",[1,1.123,2,0.923,3,0.414,4,0.686,5,0.414,6,0.321,7,0.686,8,0.414,9,1.133,10,2.504,11,2.262,12,2.504,13,3.402,14,1.524,15,1.133,16,1.524,17,1.524,18,0.923,19,0.923,20,0.938,21,2.854,22,2.219,23,0.923,24,2.219,25,0.097,26,2.219,27,1.339,28,1.715,29,1.524,30,3.551,31,3.745,32,3.661,33,0.923,34,2.802,35,2.122,36,2.301,37,1.524,38,0.923,39,1.524,40,1.524,41,1.524,42,0.923,43,1.524,44,0.923,45,1.524,46,1.524,47,1.524,48,1.119,49,0.923,50,0.923,51,1.133,52,1.524,53,0.923,54,1.524,55,0.923,56,0.923,57,0.923,58,0.53,59,0.686,60,0.923,61,0.923,62,0.53,63,0.923,64,0.686,65,1.524,66,1.524,67,0.923,68,0.923,69,0.414,70,0.923,71,1.119,72,0.53,73,0.414,74,0.923,75,0.923,76,0.686,77,0.686,78,0.414,79,0.53,80,0.923,81,2.122,82,1.524,83,0.923,84,0.923,85,0.923,86,1.524,87,0.923,88,0.923,89,1.524,90,0.923,91,0.923,92,0.923,93,0.686,94,0.923,95,0.923,96,0.923,97,0.923,98,1.524,99,0.923,100,0.923,101,0.923,102,0.022,103,0.036,104,0.022]],["title/injectables/AuthenticationService.html",[20,0.732,72,0.732]],["body/injectables/AuthenticationService.html",[3,0.436,4,0.723,5,0.436,6,0.338,8,0.436,9,1.183,15,1.736,20,0.553,22,2.171,24,1.183,25,0.097,26,1.183,27,1.155,28,0.914,35,1.736,36,2.056,48,1.678,51,0.723,58,0.914,59,1.183,64,1.183,69,1.415,71,1.161,72,0.553,73,0.436,76,0.723,77,0.723,78,0.436,79,0.559,81,2.056,93,2.056,102,0.023,103,0.037,104,0.023,105,0.972,106,0.723,107,1.183,108,2.02,109,2.02,110,1.349,111,2.765,112,1.591,113,1.591,114,2.335,115,0.972,116,2.575,117,1.736,118,1.591,119,1.502,120,0.972,121,2.765,122,3.047,123,1.591,124,2.335,125,1.591,126,0.972,127,2.413,128,0.972,129,2.765,130,2.02,131,2.02,132,2.575,133,0.972,134,2.335,135,2.335,136,1.591,137,2.335,138,0.972,139,2.02,140,1.183,141,1.591,142,0.972,143,0.972,144,1.591,145,0.972,146,0.723,147,0.972,148,0.972,149,0.723,150,0.972,151,0.972,152,0.723,153,0.972,154,0.723,155,0.972,156,0.723,157,0.972,158,0.972,159,2.02,160,0.972,161,0.972,162,1.591,163,0.972,164,0.972,165,0.972,166,0.972,167,0.972,168,0.972,169,0.972,170,0.723,171,0.972,172,0.972,173,0.972,174,0.972,175,0.972,176,0.972,177,0.972,178,2.02,179,1.591,180,0.972,181,0.972,182,0.972,183,0.972,184,0.723,185,0.972,186,0.972]],["title/modules/NgxWvnCoreModule.html",[62,1.21,187,1.21]],["body/modules/NgxWvnCoreModule.html",[3,1.246,5,1.246,6,0.966,25,0.095,71,1.596,73,1.246,78,1.246,79,1.596,102,0.065,103,0.079,104,0.065,187,1.954,188,1.596,189,2.777,190,2.065,191,2.777,192,3.4,193,2.065,194,2.777,195,2.065]],["title/interfaces/User.html",[110,0.732,196,0.944]],["body/interfaces/User.html",[3,1.018,5,1.018,6,0.79,8,1.018,25,0.093,27,1.658,28,2.181,48,2.283,69,1.595,78,1.018,102,0.053,103,0.07,104,0.053,107,2.224,110,1.041,119,2.488,149,2.644,152,2.644,154,2.644,156,2.644,196,1.018,197,2.27,198,1.688]],["title/coverage.html",[199,2.115]],["body/coverage.html",[0,1.568,1,1.224,6,0.949,7,2.029,20,0.949,25,0.091,27,1.224,72,0.949,102,0.064,103,0.079,104,0.064,106,2.029,110,0.949,140,2.029,196,1.224,198,2.029,199,2.029,200,2.029,201,2.729,202,2.729,203,3.364,204,2.729,205,2.729,206,2.729,207,2.729,208,2.729,209,2.729]],["title/dependencies.html",[210,1.772,211,1.45]],["body/dependencies.html",[25,0.094,73,1.349,102,0.07,103,0.083,104,0.07,211,1.728,212,3.007,213,3.007,214,3.567,215,3.007,216,3.007]],["title/index.html",[8,0.795,217,1.318,218,1.318]],["body/index.html",[25,0.076,58,1.86,102,0.06,103,0.076,104,0.06,146,2.407,190,2.407,200,2.637,217,1.908,218,1.908,219,2.566,220,3.546,221,2.566,222,2.566,223,2.566,224,2.566,225,2.407,226,1.908,227,1.908,228,2.566,229,2.566,230,2.566,231,2.566,232,3.237,233,3.237,234,3.237,235,2.566,236,2.566,237,2.566,238,2.566,239,2.566]],["title/modules.html",[188,1.635]],["body/modules.html",[25,0.085,102,0.073,103,0.085,104,0.073,187,1.797,188,1.797,225,2.325,240,3.126,241,3.126]],["title/overview.html",[242,2.115]],["body/overview.html",[0,1.635,25,0.081,62,1.983,72,0.989,102,0.066,103,0.081,104,0.066,184,2.871,193,2.115,195,2.115,196,1.276,211,1.635,242,2.115,243,2.844,244,2.844,245,2.844,246,3.45,247,2.844,248,2.844]],["title/additional-documentation/authentication.html",[227,1.318,249,1.772,250,1.772]],["body/additional-documentation/authentication.html",[1,1.299,20,1.008,25,0.081,34,2.594,69,1.299,102,0.068,103,0.081,104,0.068,110,1.213,117,2.154,127,2.154,170,2.594,226,2.154,251,3.488,252,3.488,253,2.896]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"modules/NgxWvnCoreModule.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"additional-documentation/authentication.html":{}}}],["0",{"_index":203,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":205,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":204,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":184,"title":{},"body":{"injectables/AuthenticationService.html":{},"overview.html":{}}}],["1.10.0",{"_index":216,"title":{},"body":{"dependencies.html":{}}}],["7/8",{"_index":207,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":206,"title":{},"body":{"coverage.html":{}}}],["9.1.1",{"_index":214,"title":{},"body":{"dependencies.html":{}}}],["access",{"_index":170,"title":{},"body":{"injectables/AuthenticationService.html":{},"additional-documentation/authentication.html":{}}}],["activatedroutesnapshot",{"_index":30,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["additional",{"_index":227,"title":{"additional-documentation/authentication.html":{}},"body":{"index.html":{}}}],["angular",{"_index":223,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":213,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":73,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"modules/NgxWvnCoreModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":74,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["application",{"_index":58,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"index.html":{}}}],["array",{"_index":119,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/User.html":{}}}],["authenticated",{"_index":129,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authentication",{"_index":250,"title":{"additional-documentation/authentication.html":{}},"body":{}}],["authenticationguard",{"_index":1,"title":{"guards/AuthenticationGuard.html":{}},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"additional-documentation/authentication.html":{}}}],["authenticationservice",{"_index":20,"title":{"injectables/AuthenticationService.html":{}},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"coverage.html":{},"additional-documentation/authentication.html":{}}}],["available",{"_index":225,"title":{},"body":{"index.html":{},"modules.html":{}}}],["based",{"_index":251,"title":{},"body":{"additional-documentation/authentication.html":{}}}],["behaviorsubject",{"_index":139,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["behaviorsubject(null",{"_index":141,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["boolean",{"_index":36,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["bootstrap",{"_index":244,"title":{},"body":{"overview.html":{}}}],["browse",{"_index":241,"title":{},"body":{"modules.html":{}}}],["canactivate",{"_index":10,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["canactivate(route",{"_index":29,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["canactivatechild",{"_index":11,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["canactivatechild(childroute",{"_index":37,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["canload",{"_index":12,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["canload(route",{"_index":41,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["certain",{"_index":57,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["change",{"_index":172,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["check",{"_index":121,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["checkactivate",{"_index":14,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["checkactivate(route",{"_index":43,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["childroute",{"_index":39,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["class",{"_index":79,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"modules/NgxWvnCoreModule.html":{}}}],["classes",{"_index":253,"title":{},"body":{"additional-documentation/authentication.html":{}}}],["clear",{"_index":111,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["clear():void",{"_index":185,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["command",{"_index":237,"title":{},"body":{"index.html":{}}}],["component",{"_index":66,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["componentclassname",{"_index":67,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["configure",{"_index":166,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["console.log('anonymous",{"_index":163,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["console.log('logged",{"_index":164,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["constructor",{"_index":18,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(authenticationservice",{"_index":19,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(private",{"_index":83,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["core",{"_index":220,"title":{},"body":{"index.html":{}}}],["core.module.ts",{"_index":191,"title":{},"body":{"modules/NgxWvnCoreModule.html":{}}}],["coverage",{"_index":199,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["current",{"_index":116,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["data",{"_index":68,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["declarations",{"_index":193,"title":{},"body":{"modules/NgxWvnCoreModule.html":{},"overview.html":{}}}],["default",{"_index":130,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["defined",{"_index":22,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["demo",{"_index":232,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":211,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":235,"title":{},"body":{"index.html":{}}}],["description",{"_index":123,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["documentation",{"_index":200,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":157,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["edit",{"_index":63,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["email",{"_index":152,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/User.html":{}}}],["example",{"_index":147,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["explanations",{"_index":231,"title":{},"body":{"index.html":{}}}],["export",{"_index":78,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"modules/NgxWvnCoreModule.html":{},"interfaces/User.html":{}}}],["exports",{"_index":195,"title":{},"body":{"modules/NgxWvnCoreModule.html":{},"overview.html":{}}}],["false",{"_index":89,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["feature",{"_index":229,"title":{},"body":{"index.html":{}}}],["file",{"_index":6,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"modules/NgxWvnCoreModule.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["first_allowed_role','second_allowed_role",{"_index":70,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["firstname",{"_index":154,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/User.html":{}}}],["follow",{"_index":64,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["forbidden",{"_index":132,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["forbiddenredirecturl",{"_index":108,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getting",{"_index":217,"title":{"index.html":{}},"body":{"index.html":{}}}],["given",{"_index":122,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["go",{"_index":60,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["graph",{"_index":240,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":0,"title":{"guards/AuthenticationGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["hasanyrole",{"_index":112,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["hasanyrole(roles",{"_index":118,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["hasrole",{"_index":113,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["hasrole(role",{"_index":125,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["here",{"_index":146,"title":{},"body":{"injectables/AuthenticationService.html":{},"index.html":{}}}],["identifier",{"_index":201,"title":{},"body":{"coverage.html":{}}}],["if(user",{"_index":161,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["implements",{"_index":80,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["import",{"_index":71,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"modules/NgxWvnCoreModule.html":{}}}],["import(\"@angular/router\").urltree",{"_index":84,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["import(\"rxjs\").observable",{"_index":85,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["imports",{"_index":194,"title":{},"body":{"modules/NgxWvnCoreModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/User.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"modules/NgxWvnCoreModule.html":{},"interfaces/User.html":{}}}],["injectable",{"_index":72,"title":{"injectables/AuthenticationService.html":{}},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":105,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["install",{"_index":233,"title":{},"body":{"index.html":{}}}],["interface",{"_index":196,"title":{"interfaces/User.html":{}},"body":{"interfaces/User.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":197,"title":{},"body":{"interfaces/User.html":{}}}],["isauthenticated",{"_index":114,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["j.doe",{"_index":150,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["j.doe@domain.tld",{"_index":153,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["john",{"_index":155,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["lastname",{"_index":156,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/User.html":{}}}],["legend",{"_index":243,"title":{},"body":{"overview.html":{}}}],["level",{"_index":230,"title":{},"body":{"index.html":{}}}],["library",{"_index":222,"title":{},"body":{"index.html":{}}}],["logged",{"_index":117,"title":{},"body":{"injectables/AuthenticationService.html":{},"additional-documentation/authentication.html":{}}}],["login",{"_index":137,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["loginredirecturl",{"_index":109,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["matching",{"_index":103,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"modules/NgxWvnCoreModule.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"additional-documentation/authentication.html":{}}}],["menu",{"_index":228,"title":{},"body":{"index.html":{}}}],["methods",{"_index":9,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["missing",{"_index":136,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["models/user.model",{"_index":177,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["module",{"_index":62,"title":{"modules/NgxWvnCoreModule.html":{}},"body":{"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["modules",{"_index":188,"title":{"modules.html":{}},"body":{"modules/NgxWvnCoreModule.html":{},"modules.html":{}}}],["name",{"_index":26,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["new",{"_index":140,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["ngmodule",{"_index":192,"title":{},"body":{"modules/NgxWvnCoreModule.html":{}}}],["ngx",{"_index":219,"title":{},"body":{"index.html":{}}}],["ngxwvncoremodule",{"_index":187,"title":{"modules/NgxWvnCoreModule.html":{}},"body":{"modules/NgxWvnCoreModule.html":{},"modules.html":{}}}],["npm",{"_index":234,"title":{},"body":{"index.html":{}}}],["null",{"_index":162,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["optional",{"_index":28,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/User.html":{}}}],["out",{"_index":248,"title":{},"body":{"overview.html":{}}}],["overview",{"_index":242,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":210,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":249,"title":{"additional-documentation/authentication.html":{}},"body":{}}],["param",{"_index":179,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["parameters",{"_index":24,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["path",{"_index":65,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["peer",{"_index":212,"title":{},"body":{"dependencies.html":{}}}],["phase",{"_index":145,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["promise",{"_index":40,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["properties",{"_index":107,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/User.html":{}}}],["protect",{"_index":56,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["provide",{"_index":143,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["providedin",{"_index":76,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["providers",{"_index":245,"title":{},"body":{"overview.html":{}}}],["queryparams",{"_index":99,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["readme",{"_index":4,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["redirect",{"_index":15,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["redirect(redirecturl",{"_index":47,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["redirectforbidden",{"_index":16,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["redirectforbidden(route",{"_index":52,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["redirection",{"_index":167,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["redirecturl",{"_index":50,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["required",{"_index":169,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["reset",{"_index":247,"title":{},"body":{"overview.html":{}}}],["result",{"_index":102,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"modules/NgxWvnCoreModule.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"additional-documentation/authentication.html":{}}}],["results",{"_index":104,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"modules/NgxWvnCoreModule.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"additional-documentation/authentication.html":{}}}],["retrieve",{"_index":158,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["return",{"_index":81,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["returns",{"_index":35,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["returnurl",{"_index":100,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["role",{"_index":127,"title":{},"body":{"injectables/AuthenticationService.html":{},"additional-documentation/authentication.html":{}}}],["roles",{"_index":69,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/User.html":{},"additional-documentation/authentication.html":{}}}],["roles.some(r",{"_index":181,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["root",{"_index":77,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["route",{"_index":34,"title":{},"body":{"guards/AuthenticationGuard.html":{},"additional-documentation/authentication.html":{}}}],["route.data",{"_index":90,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["route.data.redirectto",{"_index":95,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["route.data.roles",{"_index":91,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["router",{"_index":21,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["routerstatesnapshot",{"_index":32,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["routing",{"_index":61,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["rxjs",{"_index":176,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["s",{"_index":238,"title":{},"body":{"index.html":{}}}],["see",{"_index":226,"title":{},"body":{"index.html":{},"additional-documentation/authentication.html":{}}}],["service",{"_index":159,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["services/authentication.service",{"_index":75,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["simply",{"_index":171,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["source",{"_index":5,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"modules/NgxWvnCoreModule.html":{},"interfaces/User.html":{}}}],["src/lib/authentication/guards/authentication.guard.ts",{"_index":7,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/lib/authentication/guards/authentication.guard.ts:18",{"_index":33,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/lib/authentication/guards/authentication.guard.ts:22",{"_index":42,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/lib/authentication/guards/authentication.guard.ts:24",{"_index":23,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/lib/authentication/guards/authentication.guard.ts:29",{"_index":38,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/lib/authentication/guards/authentication.guard.ts:33",{"_index":44,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/lib/authentication/guards/authentication.guard.ts:37",{"_index":55,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/lib/authentication/guards/authentication.guard.ts:49",{"_index":53,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/lib/authentication/guards/authentication.guard.ts:56",{"_index":49,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/lib/authentication/models/user.model.ts",{"_index":198,"title":{},"body":{"interfaces/User.html":{},"coverage.html":{}}}],["src/lib/authentication/services/authentication.service.ts",{"_index":106,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/lib/authentication/services/authentication.service.ts:13",{"_index":138,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/lib/authentication/services/authentication.service.ts:17",{"_index":133,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/lib/authentication/services/authentication.service.ts:22",{"_index":142,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/lib/authentication/services/authentication.service.ts:28",{"_index":128,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/lib/authentication/services/authentication.service.ts:37",{"_index":120,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/lib/authentication/services/authentication.service.ts:46",{"_index":126,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/lib/authentication/services/authentication.service.ts:53",{"_index":115,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/lib/ngx",{"_index":189,"title":{},"body":{"modules/NgxWvnCoreModule.html":{}}}],["started",{"_index":218,"title":{"index.html":{}},"body":{"index.html":{}}}],["startup",{"_index":144,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["state",{"_index":31,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["state.url",{"_index":101,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["statements",{"_index":202,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":48,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/User.html":{}}}],["table",{"_index":209,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":208,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":124,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["test_role",{"_index":151,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.authenticationservice.clear();to",{"_index":165,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.authenticationservice.forbiddenredirecturl='/my/forbidden/page",{"_index":175,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.authenticationservice.hasanyrole(route.data.roles",{"_index":92,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.authenticationservice.isauthenticated",{"_index":87,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.authenticationservice.loginredirecturl='/my/login/page",{"_index":174,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.authenticationservice.user.next",{"_index":148,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.authenticationservice.user.subscribe(user",{"_index":160,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.checkactivate(route",{"_index":82,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.hasrole(r",{"_index":182,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.redirect(route.data.redirectto",{"_index":96,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.redirect(this.authenticationservice.forbiddenredirecturl",{"_index":97,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.redirect(this.authenticationservice.loginredirecturl",{"_index":88,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.redirectforbidden(route",{"_index":94,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.router.navigate([redirecturl",{"_index":98,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.user.next(null",{"_index":186,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.user.value",{"_index":178,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.user.value.roles",{"_index":180,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.user.value.roles.indexof(role",{"_index":183,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.validateauthenticationrequirement(state",{"_index":86,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["true",{"_index":93,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["tslib",{"_index":215,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":27,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["undefined",{"_index":46,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["url",{"_index":134,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["urls",{"_index":168,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["use",{"_index":59,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["used",{"_index":135,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user",{"_index":110,"title":{"interfaces/User.html":{}},"body":{"injectables/AuthenticationService.html":{},"interfaces/User.html":{},"coverage.html":{},"additional-documentation/authentication.html":{}}}],["userid",{"_index":149,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/User.html":{}}}],["using",{"_index":236,"title":{},"body":{"index.html":{}}}],["validateauthenticationrequirement",{"_index":17,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["validateauthenticationrequirement(state",{"_index":54,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["validation",{"_index":252,"title":{},"body":{"additional-documentation/authentication.html":{}}}],["value",{"_index":131,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["values",{"_index":173,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["void",{"_index":51,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{}}}],["wavenet",{"_index":221,"title":{},"body":{"index.html":{}}}],["wavenet/ngx",{"_index":239,"title":{},"body":{"index.html":{}}}],["website",{"_index":224,"title":{},"body":{"index.html":{}}}],["wvn",{"_index":190,"title":{},"body":{"modules/NgxWvnCoreModule.html":{},"index.html":{}}}],["yes",{"_index":45,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["zoom",{"_index":246,"title":{},"body":{"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/lib/authentication/guards/authentication.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                canActivateChild\n                            \n                            \n                                canLoad\n                            \n                            \n                                    Private\n                                checkActivate\n                            \n                            \n                                    Private\n                                redirect\n                            \n                            \n                                    Private\n                                redirectForbidden\n                            \n                            \n                                    Private\n                                validateAuthenticationRequirement\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/lib/authentication/guards/authentication.guard.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/authentication/guards/authentication.guard.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivateChild\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/authentication/guards/authentication.guard.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    childRoute\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean |  |  | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canLoad\n                        \n                        \n                    \n                \n            \n            \n                \ncanLoad(route: Route)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/authentication/guards/authentication.guard.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            checkActivate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkActivate(route: Route | ActivatedRouteSnapshot, state?: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/authentication/guards/authentication.guard.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                            Route | ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            redirect\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    redirect(redirectUrl: string, state?: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/authentication/guards/authentication.guard.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    redirectUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            redirectForbidden\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    redirectForbidden(route: Route | ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/authentication/guards/authentication.guard.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                            Route | ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            validateAuthenticationRequirement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateAuthenticationRequirement(state: RouterStateSnapshot, route: Route | ActivatedRouteSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/authentication/guards/authentication.guard.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    route\n                                    \n                                            Route | ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n        \n            To protect a certain route of your application, you can use the AuthenticationGuard. Go to your routing module and edit the route as follow:  \n{\n    path: 'path-of-you-component',\n    component: ComponentClassName,\n    canLoad: [AuthenticationGuard],\n    canActivate: [AuthenticationGuard],\n    data: {\n      roles: ['FIRST_ALLOWED_ROLE','SECOND_ALLOWED_ROLE']\n    }\n  }\n        \n\n        \n            import {Injectable} from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  CanActivateChild,\n  CanLoad,\n  Route,\n  Router,\n  RouterStateSnapshot\n} from '@angular/router';\nimport {AuthenticationService} from \"../services/authentication.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationGuard implements CanLoad, CanActivate, CanActivateChild {\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    return this.checkActivate(route, state);\n  }\n\n  canLoad(route: Route): boolean {\n    return this.checkActivate(route);\n  }\n\n  constructor(private authenticationService: AuthenticationService, private router: Router) {\n  }\n\n  canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | import(\"@angular/router\").UrlTree | import(\"rxjs\").Observable | Promise {\n    return this.validateAuthenticationRequirement(state, childRoute);\n  }\n\n  private checkActivate(route: Route | ActivatedRouteSnapshot, state?: RouterStateSnapshot): boolean | undefined {\n    return this.validateAuthenticationRequirement(state, route);\n  }\n\n  private validateAuthenticationRequirement(state: RouterStateSnapshot, route: Route | ActivatedRouteSnapshot) {\n    if (!this.authenticationService.isAuthenticated()) {\n      this.redirect(this.authenticationService.loginRedirectUrl, state);\n      return false;\n    }\n    if (!route.data || !route.data.roles || this.authenticationService.hasAnyRole(route.data.roles)) {\n      return true;\n    }\n    this.redirectForbidden(route, state);\n    return false;\n  }\n\n  private redirectForbidden(route: Route | ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if (route.data.redirectTo) {\n      this.redirect(route.data.redirectTo, state);\n    }\n    this.redirect(this.authenticationService.forbiddenRedirectUrl, state);\n  }\n\n  private redirect(redirectUrl: string, state?: RouterStateSnapshot) {\n    if (state) {\n      this.router.navigate([redirectUrl], {queryParams: {returnUrl: state.url}});\n    } else {\n      this.router.navigate([redirectUrl]);\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/authentication/services/authentication.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                forbiddenRedirectUrl\n                            \n                            \n                                loginRedirectUrl\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                hasAnyRole\n                            \n                            \n                                hasRole\n                            \n                            \n                                isAuthenticated\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/authentication/services/authentication.service.ts:53\n                \n            \n\n\n            \n                \n                    Clear the current logged user if any\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasAnyRole\n                        \n                        \n                    \n                \n            \n            \n                \nhasAnyRole(roles: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/authentication/services/authentication.service.ts:37\n                \n            \n\n\n            \n                \n                    Check if a user has a any of given roles\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    roles\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the roles to test\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if the user has any of the given roles\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasRole\n                        \n                        \n                    \n                \n            \n            \n                \nhasRole(role: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/authentication/services/authentication.service.ts:46\n                \n            \n\n\n            \n                \n                    Check if a user has a given role\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    role\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the role to test\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if the user has the given role\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isAuthenticated\n                        \n                        \n                    \n                \n            \n            \n                \nisAuthenticated()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/authentication/services/authentication.service.ts:28\n                \n            \n\n\n            \n                \n                    Check if the user is authenticated\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if the user is authenticated\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            forbiddenRedirectUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/forbidden'\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/authentication/services/authentication.service.ts:17\n                            \n                        \n\n                \n                    \n                        Url used to redirect the user when forbidden (missing role)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loginRedirectUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/login'\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/authentication/services/authentication.service.ts:13\n                            \n                        \n\n                \n                    \n                        Url used to redirect the user when not authenticated\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BehaviorSubject\n\n                        \n                    \n                    \n                        \n                            Default value : new BehaviorSubject(null)\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/authentication/services/authentication.service.ts:22\n                            \n                        \n\n                \n                    \n                        Logged user\n\n                    \n                \n\n            \n        \n\n\n    \n\n    \n        You have to provide the current user at startup or login phase of your application. Here is an example:\nthis.authenticationService.user.next({\n  userId: 'j.doe',\n  roles: ['TEST_ROLE'],\n  email: 'j.doe@domain.tld',\n  firstName: 'John',\n  lastName: 'Doe'\n})To retrieve the current user, use the service as follow:\nthis.authenticationService.user.subscribe(user => {\n  if(user == null){\n    console.log('anonymous');\n  }else{\n    console.log('logged');\n  }\n});To clear the current user, use the service as follow:\nthis.authenticationService.clear();To configure the redirection urls (login required and forbidden access), simply change the values of the service at application startup:\nthis.authenticationService.loginRedirectUrl='/my/login/page';\nthis.authenticationService.forbiddenRedirectUrl='/my/forbidden/page';\n    \n\n    \n        import {Injectable} from \"@angular/core\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {User} from \"../models/user.model\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n\n  /**\n   * Url used to redirect the user when not authenticated\n   */\n  loginRedirectUrl: string = '/login';\n  /**\n   * Url used to redirect the user when forbidden (missing role)\n   */\n  forbiddenRedirectUrl: string = '/forbidden';\n\n  /**\n   * Logged user\n   */\n  user: BehaviorSubject = new BehaviorSubject(null);\n\n  /**\n   * Check if the user is authenticated\n   * @return true if the user is authenticated\n   */\n  isAuthenticated(): boolean {\n    return this.user.value != null;\n  };\n\n  /**\n   * Check if a user has a any of given roles\n   * @param roles the roles to test\n   * @return true if the user has any of the given roles\n   */\n  hasAnyRole(roles: Array) : boolean{\n    return this.user.value && this.user.value.roles && roles.some(r => this.hasRole(r));\n  }\n\n  /**\n   * Check if a user has a given role\n   * @param role the role to test\n   * @return true if the user has the given role\n   */\n  hasRole(role: string) : boolean{\n    return this.user.value && this.user.value.roles.indexOf(role) != -1;\n  }\n\n  /**\n   * Clear the current logged user if any\n   */\n  clear():void{\n    this.user.next(null);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxWvnCoreModule.html":{"url":"modules/NgxWvnCoreModule.html","title":"module - NgxWvnCoreModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxWvnCoreModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/ngx-wvn-core.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from '@angular/core';\n\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: []\n})\nexport class NgxWvnCoreModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/authentication/models/user.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        email\n                                \n                                \n                                            Optional\n                                        firstName\n                                \n                                \n                                            Optional\n                                        lastName\n                                \n                                \n                                        roles\n                                \n                                \n                                        userId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                    \n                                \n                                \n                                    \n                                        roles:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                    \n                                \n                                \n                                    \n                                        userId:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface User {\n\n  userId: any;\n  roles: Array;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/authentication/guards/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/lib/authentication/models/user.model.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/lib/authentication/services/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                87 %\n                (7/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : >=9.1.1\n        \n            @angular/core : >=9.1.1\n        \n            tslib : ^1.10.0\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nngx-wvn-core\nWavenet core library for Angular application.\nDocumentation\nA documentation website is available here. See Additional documentation menu for feature level explanations.\nDemo\nA demo application is available here.\nGetting started\nInstall NPM dependency by using this command:\nnpm install -s @wavenet/ngx-wvn-core\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxWvnCoreModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/authentication.html":{"url":"additional-documentation/authentication.html","title":"additional-page - Authentication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nRole-based route access validation\nRoute access validation based on roles of logged user. See classes:\n\nUser\nAuthenticationGuard\nAuthenticationService\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
